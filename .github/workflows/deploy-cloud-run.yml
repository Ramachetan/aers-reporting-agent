# This workflow builds and pushes a Docker container to Google Artifact Registry
# and deploys it on Cloud Run when a commit is pushed to the "main" branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation
#
#    Required IAM roles for the service account:
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
# 3. Update the environment variables below to match your Google Cloud setup
#
# 4. Set the following secrets in your GitHub repository:
#    - GEMINI_API_KEY: Your Google Gemini API key
#    - SUPABASE_URL: Your Supabase project URL
#    - SUPABASE_ANON_KEY: Your Supabase anonymous key

name: 'Build and Deploy AERS Agent to Cloud Run'

on:
  push:
    branches:
      - 'main'
  workflow_dispatch: # Allow manual triggering

env:
  PROJECT_ID: 'argo-ai-459515' # Your Google Cloud project ID
  REGION: 'us-central1' # Your preferred region
  SERVICE: 'aers-reporting-agent' # Cloud Run service name
  REPOSITORY: 'aers-agent-repo' # Artifact Registry repository name
  WORKLOAD_IDENTITY_PROVIDER: 'projects/1036646057438/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider' # Your workload identity provider

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      # Configure Workload Identity Federation and generate an access token
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: 'github-actions-sa@argo-ai-459515.iam.gserviceaccount.com'

      # Set up Cloud SDK
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      # Configure Docker to use the gcloud command-line tool as a credential helper
      - name: 'Configure Docker Auth'
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Create Artifact Registry repository if it doesn't exist
      - name: 'Create Artifact Registry repository'
        run: |-
          gcloud artifacts repositories describe ${{ env.REPOSITORY }} \
            --location=${{ env.REGION }} || \
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="AERS Reporting Agent Docker repository"

      # Build and push Docker image
      - name: 'Build and Push Container'
        run: |-
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
          DOCKER_TAG_LATEST="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"
          
          docker build --tag "${DOCKER_TAG}" --tag "${DOCKER_TAG_LATEST}" .
          docker push "${DOCKER_TAG}"
          docker push "${DOCKER_TAG_LATEST}"

      # Deploy to Cloud Run
      - id: 'deploy'
        name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}'
          env_vars: |
            PORT=8080
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            PUBLIC_URL=${{ steps.deploy.outputs.url }}
          flags: |
            --allow-unauthenticated
            --port=8080
            --memory=1Gi
            --cpu=1
            --max-instances=10
            --min-instances=0
            --concurrency=80

      # Show deployment URL
      - name: 'Show Deployment URL'
        run: |-
          echo "ðŸš€ Application deployed successfully!"
          echo "ðŸ“± AERS Reporting Agent URL: ${{ steps.deploy.outputs.url }}"
          echo "ðŸ”— Direct link: ${{ steps.deploy.outputs.url }}"
